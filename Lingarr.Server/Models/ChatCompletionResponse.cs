using System.Text.Json.Serialization;

namespace Lingarr.Server.Models;

/// <summary>
/// Response model for OpenAI's chat completion endpoint
/// </summary>
public class ChatCompletionResponse
{
    /// <summary>
    /// The unique identifier for the completion
    /// </summary>
    [JsonPropertyName("id")]
    public string? Id { get; set; }

    /// <summary>
    /// The type of object returned
    /// </summary>
    [JsonPropertyName("object")]
    public string? Object { get; set; }

    /// <summary>
    /// The timestamp of when the completion was created
    /// </summary>
    [JsonPropertyName("created")]
    public long Created { get; set; }

    /// <summary>
    /// The model used for the completion
    /// </summary>
    [JsonPropertyName("model")]
    public string? Model { get; set; }

    /// <summary>
    /// The list of chat completion choices
    /// </summary>
    [JsonPropertyName("choices")]
    public List<Choice>? Choices { get; set; }

    /// <summary>
    /// Usage statistics for the completion request
    /// </summary>
    [JsonPropertyName("usage")]
    public Usage? Usage { get; set; }
}

/// <summary>
/// Represents a single completion choice
/// </summary>
public class Choice
{
    /// <summary>
    /// Index of the choice
    /// </summary>
    [JsonPropertyName("index")]
    public int Index { get; set; }

    /// <summary>
    /// The message generated by the model
    /// </summary>
    [JsonPropertyName("message")]
    public Message Message { get; set; } = new();

    /// <summary>
    /// The reason the model stopped generating
    /// </summary>
    [JsonPropertyName("finish_reason")]
    public string? FinishReason { get; set; }
}

/// <summary>
/// Represents a message in the chat completion
/// </summary>
public class Message
{
    /// <summary>
    /// The role of the message author (system, user, or assistant)
    /// </summary>
    [JsonPropertyName("role")]
    public string? Role { get; set; }

    /// <summary>
    /// The content of the message
    /// </summary>
    [JsonPropertyName("content")]
    public string Content { get; set; } = string.Empty;
}

/// <summary>
/// Represents token usage information for the request
/// </summary>
public class Usage
{
    /// <summary>
    /// Number of tokens in the prompt
    /// </summary>
    [JsonPropertyName("prompt_tokens")]
    public int PromptTokens { get; set; }

    /// <summary>
    /// Number of tokens in the completion
    /// </summary>
    [JsonPropertyName("completion_tokens")]
    public int CompletionTokens { get; set; }

    /// <summary>
    /// Total number of tokens used in the request
    /// </summary>
    [JsonPropertyName("total_tokens")]
    public int TotalTokens { get; set; }
}